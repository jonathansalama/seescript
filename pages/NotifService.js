/**
 * Notification Service
 * some code was adapted from the library github example https://github.com/zo0r/react-native-push-notification
 */

import PushNotification from 'react-native-push-notification';
import { openDatabase } from 'react-native-sqlite-storage';


var db = openDatabase({ name: 'Med.db' });

export default class NotifService {

  constructor(onRegister, onNotification) {
    this.configure(onRegister, onNotification);
    this.lastId = 0;
    //this.notif_id = 0;
    this.allIDs = {};

    db.transaction(function(txn) {
      txn.executeSql(
        "SELECT name FROM sqlite_master WHERE type='table' AND name='notifications'",
        [],
        function(tx, res) {
          // console.log('item:', res.rows.length);
          if (res.rows.length == 0) {
            //alert("empty");
            txn.executeSql('DROP TABLE IF EXISTS notifications', []);
            txn.executeSql(
              'CREATE TABLE IF NOT EXISTS notifications(notif_id INTEGER PRIMARY KEY AUTOINCREMENT, entry_id INTEGER, hour INTEGER, minute INTEGER)',
              []
            );
          }
        }
      );
    });
  }

  configure(onRegister, onNotification, gcm = "") {
    PushNotification.configure({
      // (optional) Called when Token is generated (iOS and Android)
      onRegister: onRegister, //this._onRegister.bind(this),

      // (required) Called when a remote or local notification is opened or received
      onNotification: onNotification, //this._onNotification,

      // ANDROID ONLY: GCM Sender ID (optional - not required for local notifications, but is need to receive remote push notifications)
      senderID: gcm,

      // IOS ONLY (optional): default: all - Permissions to register.
      permissions: {
        alert: true,
        badge: true,
        sound: true
      },

      // Should the initial notification be popped automatically
      // default: true
      popInitialNotification: true,

      /**
        * (optional) default: true
        * - Specified if permissions (ios) and token (android and ios) will requested or not,
        * - if not, you must call PushNotificationsHandler.requestPermissions() later
        */
      requestPermissions: true,
    });
  }

  localNotif() {
    this.lastId++;
    PushNotification.localNotification({
      /* Android Only Properties */
      id: '' + this.lastId, // (optional) Valid unique 32 bit integer specified as string. default: Autogenerated Unique ID
      ticker: "My Notification Ticker", // (optional)
      autoCancel: true, // (optional) default: true
      largeIcon: "ic_launcher", // (optional) default: "ic_launcher"
      smallIcon: "ic_notification", // (optional) default: "ic_notification" with fallback for "ic_launcher"
      bigText: "Take your medication", // (optional) default: "message" prop
      subText: "SeeScript Reminder", // (optional) default: none
      color: "red", // (optional) default: system default
      vibrate: true, // (optional) default: true
      vibration: 3000, // vibration length in milliseconds, ignored if vibrate=false, default: 1000
      tag: 'some_tag', // (optional) add tag to message
      group: "group", // (optional) add group to message
      ongoing: false, // (optional) set whether this is an "ongoing" notification

      /* iOS only properties */
      alertAction: 'view', // (optional) default: view
      category: '', // (optional) default: empty string
      userInfo: {}, // (optional) default: {} (using null throws a JSON value '<null>' error)

      /* iOS and Android properties */
      title: "Medication Reminder", // (optional)
      message: "Take your medication", // (required)
      playSound: false, // (optional) default: true
      soundName: 'default', // (optional) Sound to play when the notification is shown. Value of 'default' plays the default sound. It can be set to a custom sound such as 'android.resource://com.xyz/raw/my_sound'. It will look for the 'my_sound' audio file in 'res/raw' directory and play it. default: 'default' (default sound is played)
      number: 10, // (optional) Valid 32 bit integer specified as string. default: none (Cannot be zero)
      actions: '["Yes", "No"]',  // (Android only) See the doc for notification actions to know more
    });
  }

  scheduleNotif(item, thehour, theminute, repeat) {
    this.lastId++;
    // const currentID = {[this.lastId]: item.entry_id};
    // Object.assign(this.allIDs, currentID);
    //console.log("size: " + Object.keys(this.allIDs).length);
    //console.log("lastid: " + this.lastId);
      var notif_id= 0;

      db.transaction(function(tx) {
        tx.executeSql(
          'INSERT INTO notifications (entry_id, hour, minute) VALUES (?,?,?)',
          [item.entry_id, thehour, theminute,],
          (tx, results) => {
            console.log('Inserted into notifications table: ' + results.rowsAffected + " row affected.");
            notif_id = results.insertId;
            console.log("Notification ID: " + notif_id);

          }
        );
      }, function(error) {
        console.log('Transaction ERROR: ' + error.message);
      }, function() {
        console.log('Populated database OK');

        console.log("NOTIFID Outside: " + notif_id);

    var thedate  = new Date();
    if (thehour < thedate.getHours()) {
      thedate.setDate(thedate.getDate() + 1);
    }
    else if (thehour == thedate.getHours() && theminute <= thedate.getMinutes())
    {
      thedate.setDate(thedate.getDate() + 1);
    }
    else {
    thedate.setDate(thedate.getDate());
    }
    // console.log("REPEAT: ", parseInt(repeat));
    thedate.setHours(parseInt(thehour));
    thedate.setMinutes(parseInt(theminute));
    thedate.setMilliseconds(0);
    // console.log(thedate);

    console.log("Here we are");

    const selectedTime = (initialHour, theMinute) => {
      console.log("SELECTING TIME")
      var theTime = '';
      var twelvehour = ' AM';
      var theHour = initialHour;
      if (initialHour >= 12) {
        theHour = initialHour - 12;
        twelvehour = ' PM';
      }
      if (theHour == 0) {
        theHour = 12;
      }
      theTime = '' + theHour + ":" + ("0" + theMinute).slice(-2) + twelvehour;
      console.log(theTime);
      return theTime;
    }
    var theSelectedTime = selectedTime(thehour, theminute);

    PushNotification.localNotificationSchedule({
      date: new Date(thedate),

      /* Android Only Properties */
      id: '' + notif_id, // (optional) Valid unique 32 bit integer specified as string. default: Autogenerated Unique ID
      ticker: "Prescription Notification", // (optional)
      autoCancel: true, // (optional) default: true
      largeIcon: "ic_launcher", // (optional) default: "ic_launcher"
      smallIcon: "ic_notification", // (optional) default: "ic_notification" with fallback for "ic_launcher"
      bigText: "Take " + item.dose + " of " + item.med_name + " at " + theSelectedTime, // (optional) default: "message" prop
      subText: "Take your medication", // (optional) default: none
      color: "blue", // (optional) default: system default
      vibrate: true, // (optional) default: true
      vibration: 1500, // vibration length in milliseconds, ignored if vibrate=false, default: 1000
      tag: '', // (optional) add tag to message
      group: "", // (optional) add group to message
      ongoing: false, // (optional) set whether this is an "ongoing" notification

      /* iOS only properties */
      alertAction: 'view', // (optional) default: view
      category: '', // (optional) default: empty string
      userInfo: { id: '' + notif_id }, // (optional) default: {} (using null throws a JSON value '<null>' error)

      /* iOS and Android properties */
      title: item.med_name, // (optional)
      message: "Take " + item.dose + " at " + theSelectedTime, // (required)
      playSound: true, // (optional) default: true
      repeatType: 'time',
      repeatTime: (parseInt(repeat) * 1000 * 60 * 60),
      soundName: 'default', // (optional) Sound to play when the notification is shown. Value of 'default' plays the default sound. It can be set to a custom sound such as 'android.resource://com.xyz/raw/my_sound'. It will look for the 'my_sound' audio file in 'res/raw' directory and play it. default: 'default' (default sound is played)
    });


    console.log("Finished setting notification: Notification ID: " + notif_id);
      });
    
    
  }






  checkPermission(cbk) {
    return PushNotification.checkPermissions(cbk);
  }

  // cancelLastNotif() {
  //   PushNotification.cancelLocalNotifications({id: '' + this.lastId});
  // }

  cancelNotif(item) {
    console.log("cancelling " + item.entry_id);
    //console.log(Object.keys(this.allIDs).length);
    //console.log(this.lastId);
    var key = 0;

    db.transaction(tx => {
      tx.executeSql('SELECT * FROM notifications where entry_id=?', [item.entry_id], (tx, results) => {
        console.log("SELECTRESULTS: " + results.rows.length);
        for (let i = 0; i < results.rows.length; ++i) {
          key = results.rows.item(i).notif_id;
          console.log("Key: " + key);
          var keystring = "" + key;
          PushNotification.cancelLocalNotifications({id: keystring});

        }

      });
    }, function(error) {
        console.log('Transaction ERROR: ' + error.message);
      }, function() {
        console.log('Populated database OK');
      });

    db.transaction(tx => {
      tx.executeSql(
        'DELETE FROM notifications where entry_id=?',
        [item.entry_id],
        (tx, results) => {
          console.log('DeleteResults', results.rowsAffected);
        });
      });

    // var itemid = item.entry_id;
    // for (var key of Object.keys(this.allIDs)) {
    //   console.log("Key: " + key + ", Value: " + this.allIDs[key]);
    //   if (this.allIDs[key] == itemid) {
    //     console.log("Key: " + key);
    //     PushNotification.cancelLocalNotifications({id: key});
    //     delete this.allIDs[key]
    //   }
    // }
  }
  cancelOneNotif(notificationId) {
    var notifString = '' + notificationId;
    console.log("NOTIFICATION ID DELETE: " + notifString);
    PushNotification.cancelLocalNotifications({id: notifString});
    db.transaction(tx => {
      tx.executeSql(
        'DELETE FROM notifications where notif_id=?',
        [notificationId],
        (tx, results) => {
          console.log('DeleteResults', results.rowsAffected);
        });
      });
  }


  cancelAll() {
    PushNotification.cancelAllLocalNotifications();
  }
}