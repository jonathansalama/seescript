import valoo from 'valoo';
import Fuse from 'fuse.js';
import React, { useState, useEffect, Fragment, useCallback } from 'react';
import { __assign } from 'tslib';
import debounce from 'debounce';

var EventType;

(function (EventType) {
  EventType[EventType["Initial"] = 0] = "Initial";
  EventType[EventType["Input"] = 1] = "Input";
  EventType[EventType["External"] = 2] = "External";
})(EventType || (EventType = {}));

function behaviorStore(initialValue) {
  var store = valoo(initialValue);
  var currentState = initialValue;

  var emit = function (value) {
    currentState = value;
    store(value);
  };

  emit.on = function (fn) {
    fn(currentState);
    return store.on(fn);
  };

  return emit;
}

function filterResultsFactory(store) {
  var Results = function (props) {
    var _a = useState(""),
        searchVal = _a[0],
        setSearch = _a[1];

    useEffect(function () {
      var unsubscribe = store.on(function (_a) {
        var v = _a.v;
        setSearch(v);
      });
      return unsubscribe;
    }, []);

    var prefilterItems = function (s) {
      var items = props.items;
      (props.prefilters || []).forEach(function (_a) {
        var regex = _a.regex,
            handler = _a.handler;
        var matches = s.match(regex) || [];
        s = s.replace(regex, "").trim();
        matches.forEach(function (match) {
          items = handler(match, items, Fuse);
        });
      });
      return {
        items: items,
        search: s
      };
    };

    var filterItems = function (s) {
      var _a = prefilterItems(s || ""),
          items = _a.items,
          search = _a.search;

      if (search.trim() === "") {
        return props.defaultAllItems ? items : [];
      } else {
        var fuse = new Fuse(items, props.fuseConfig);
        return fuse.search(search);
      }
    };

    var filteredItems = filterItems(searchVal);
    return React.createElement(Fragment, null, props.children(filteredItems));
  };

  Results.displayName = "FilterResults";
  Results.defaultProps = {
    defaultAllItems: true,
    prefilters: []
  };
  return Results;
}

var defaultProps = {
  classPrefix: "react-fuzzy-filter",
  debounceTime: 0,
  inputProps: {},
  onChange: function (value) {
    return value;
  }
};
function inputFilterFactory(store) {
  function updateValue(value, onChange) {
    var overrideValue = onChange(value);
    store({
      t: EventType.Input,
      v: overrideValue
    });
  }

  var Input = function (props) {
    var initialSearch = props.initialSearch || "";
    var onChange = props.onChange || defaultProps.onChange;
    var debounceTime = props.debounceTime || defaultProps.debounceTime;

    var _a = useState(initialSearch),
        inputValue = _a[0],
        setValue = _a[1];

    var debouncedUpdate = useCallback(debounce(updateValue, debounceTime), [debounceTime]);
    useEffect(function () {
      var unsubscribe = store.on(function (_a) {
        var v = _a.v,
            t = _a.t;

        if (t === EventType.External) {
          setValue(v);
        }
      });
      return unsubscribe;
    }, []);
    useEffect(function () {
      updateValue(initialSearch, onChange);
    }, [initialSearch, onChange]);

    var handleChange = function (_a) {
      var value = _a.target.value;
      setValue(value);

      if (debounceTime) {
        debouncedUpdate(value, onChange);
      } else {
        updateValue(value, onChange);
      }
    };

    return React.createElement("input", __assign({
      className: props.classPrefix + "__input",
      onChange: handleChange,
      value: inputValue
    }, props.inputProps));
  };

  Input.displayName = "InputFilter";
  Input.defaultProps = defaultProps;
  return Input;
}

function fuzzyFilterFactory() {
  var store = behaviorStore({
    t: EventType.Initial,
    v: ""
  });
  return {
    FilterResults: filterResultsFactory(store),
    InputFilter: inputFilterFactory(store),
    changeInputValue: function (value) {
      store({
        t: EventType.External,
        v: typeof value !== "string" ? "" : value
      });
    }
  };
}

export default fuzzyFilterFactory;
//# sourceMappingURL=react-fuzzy-filter.esm.js.map
